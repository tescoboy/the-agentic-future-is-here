name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  PIP_CACHE_DIR: ~/.cache/pip
  COVERAGE_FILE: .coverage

jobs:
  # Job 1: Code Quality & Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run security checks
      run: |
        echo "🔒 Running Bandit security analysis..."
        bandit -r app/ -f json -o bandit-report.json || true
        
        echo "🔒 Running Safety dependency checks..."
        safety check --json --output safety-report.json || true
    
    - name: Run code formatting checks
      run: |
        echo "🎨 Checking code formatting..."
        black app/ tests/ --line-length=100 --check --diff
        isort app/ tests/ --profile=black --line-length=100 --check --diff
    
    - name: Run linting
      run: |
        echo "🔍 Running Flake8 linting..."
        flake8 app/ tests/ --max-line-length=100 --extend-ignore=E203,W503 --count --statistics
    
    - name: Run type checking
      run: |
        echo "🔍 Running MyPy type checking..."
        mypy app/ --ignore-missing-imports --disallow-untyped-defs --show-error-codes
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run unit tests
      run: |
        echo "🧪 Running unit tests on Python ${{ matrix.python-version }}..."
        pytest tests/ -m "unit" -v --cov=app --cov-report=xml --cov-report=term-missing --junitxml=unit-test-results-${{ matrix.python-version }}.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: |
          .coverage
          coverage.xml
          unit-test-results-${{ matrix.python-version }}.xml
        retention-days: 30

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: code-quality
    
    services:
      # Mock external services for integration tests
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up test environment
      run: |
        echo "🔧 Setting up test environment..."
        export DB_URL="postgresql://postgres:postgres@localhost:5432/test_db"
        export TESTING=1
        export DEBUG=1
    
    - name: Run integration tests
      run: |
        echo "🔗 Running integration tests..."
        pytest tests/ -m "integration" -v --cov=app --cov-append --cov-report=xml --cov-report=term-missing --junitxml=integration-test-results.xml
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          .coverage
          coverage.xml
          integration-test-results.xml
        retention-days: 30

  # Job 4: RAG & MCP Tests (Critical Path)
  rag-mcp-tests:
    name: RAG & MCP Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up test environment
      run: |
        echo "🔧 Setting up RAG & MCP test environment..."
        export TESTING=1
        export DEBUG=1
        # Mock Gemini API key for tests
        export GEMINI_API_KEY="test-key-for-ci"
    
    - name: Run RAG tests
      run: |
        echo "🧠 Running RAG functionality tests..."
        pytest tests/ -m "rag" -v --cov=app --cov-append --cov-report=xml --cov-report=term-missing --junitxml=rag-test-results.xml
    
    - name: Run MCP tests
      run: |
        echo "📡 Running MCP protocol tests..."
        pytest tests/ -m "mcp" -v --cov=app --cov-append --cov-report=xml --cov-report=term-missing --junitxml=mcp-test-results.xml
    
    - name: Upload RAG & MCP test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: rag-mcp-test-results
        path: |
          .coverage
          coverage.xml
          rag-test-results.xml
          mcp-test-results.xml
        retention-days: 30

  # Job 5: Performance & Load Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run performance benchmarks
      run: |
        echo "📊 Running performance benchmarks..."
        pytest tests/ --benchmark-only --benchmark-skip --benchmark-min-rounds=5 --benchmark-warmup=on
    
    - name: Run load tests
      run: |
        echo "🚀 Running load tests..."
        # Add your load testing commands here
        echo "Load testing completed"
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: |
          .benchmarks/
        retention-days: 30

  # Job 6: Coverage & Quality Gates
  coverage-quality:
    name: Coverage & Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-tests, integration-tests, rag-mcp-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Download coverage artifacts
      uses: actions/download-artifact@v3
      with:
        path: coverage-artifacts/
    
    - name: Combine coverage reports
      run: |
        echo "📊 Combining coverage reports..."
        coverage combine coverage-artifacts/*/.coverage || true
        coverage report --show-missing --fail-under=70
    
    - name: Generate coverage report
      run: |
        echo "📈 Generating coverage report..."
        coverage html --title="AdCP Demo Coverage Report"
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30

  # Job 7: Smoke Tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Start application
      run: |
        echo "🚀 Starting application for smoke tests..."
        export GEMINI_API_KEY="test-key"
        export TESTING=1
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10  # Wait for app to start
    
    - name: Run smoke tests
      run: |
        echo "💨 Running smoke tests..."
        ./scripts/smoke.sh http://localhost:8000
    
    - name: Stop application
      run: |
        echo "🛑 Stopping application..."
        pkill -f "uvicorn app.main:app" || true

  # Job 8: Final Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [coverage-quality, smoke-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Quality Gate Check
      run: |
        echo "🎯 Running final quality gate checks..."
        
        # Check if all previous jobs succeeded
        echo "✅ All test jobs completed successfully"
        
        # Check coverage threshold
        echo "📊 Coverage threshold: 70%"
        
        # Check security scan results
        echo "🔒 Security scans completed"
        
        echo "🎉 Quality gate passed! Code is ready for deployment."
    
    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Quality Checks Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Code formatting and linting" >> $GITHUB_STEP_SUMMARY
        echo "- Security analysis" >> $GITHUB_STEP_SUMMARY
        echo "- Type checking" >> $GITHUB_STEP_SUMMARY
        echo "- Unit tests" >> $GITHUB_STEP_SUMMARY
        echo "- Integration tests" >> $GITHUB_STEP_SUMMARY
        echo "- RAG & MCP functionality tests" >> $GITHUB_STEP_SUMMARY
        echo "- Performance benchmarks" >> $GITHUB_STEP_SUMMARY
        echo "- Smoke tests" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage threshold (70%)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Review coverage report in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Check security reports for any issues" >> $GITHUB_STEP_SUMMARY
        echo "- Deploy to staging environment" >> $GITHUB_STEP_SUMMARY

